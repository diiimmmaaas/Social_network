{"version":3,"file":"static/js/424.ef36bfdb.chunk.js","mappings":"gKACA,G,QAA0B,0BAA1B,EAA+D,2BAA/D,EAA0G,+BAA1G,EAAsN,0BCAtN,K,mBCQaA,EAAoC,SAACC,GAC9C,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAS,UAAKC,EAAAA,OAAL,YAAuBA,EAAAA,QAArC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCZtC,EAA0B,yBCObC,EAAsC,SAACP,GAChD,OACI,gBAAKG,UAAWC,EAAhB,UACI,0BAAOJ,EAAMQ,U,uCCuCnBC,GAAcC,EAAAA,EAAAA,GAAiB,IAmB/BC,GAAsBC,EAAAA,EAAAA,GAAkC,CAACC,KAAM,wBAAzCD,EAjBuD,SAACZ,GAChF,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXZ,KAAM,iBACNa,YAAa,kBACbC,SAAU,CAACC,EAAAA,EAAeZ,QAGrC,0BACI,6C,mBC9BhB,GAL0Ba,E,QAAAA,KACtBC,EAAAA,EAAAA,KAjBkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAME,QAAQD,YAC3BE,aAAcH,EAAME,QAAQC,iBAIX,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAmBD,SAQpCE,EAAAA,EAFsBV,EDNoB,SAACtB,GAC3C,IAAIiC,EAAkBjC,EAAMyB,YAAYS,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACrC,EAAD,CAAoBO,KAAM6B,EAAE7B,KAAMJ,GAAIiC,EAAEjC,IAA3BkC,MACnEC,EAAmBrC,EAAM2B,aAAaO,KAAI,SAACI,EAAGF,GAAJ,OAAc,SAAC7B,EAAD,CAAqBC,KAAM8B,EAAE9B,MAAf4B,MAO1E,OACI,gBAAKjC,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK6B,KAEL,gBAAK9B,UAAWC,EAAhB,UACI,yBAAMiC,OAEV,SAAC1B,EAAD,CAAqBG,SAdX,SAACyB,GACnB,IAAIT,EAAiBS,EAAOT,eAC5B9B,EAAM6B,YAAYC","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialog/Dialog.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__3fEWa\",\"container\":\"Dialogs_container__-oN1H\",\"dialogs_items\":\"Dialogs_dialogs_items__XXwS6\",\"dialog\":\"Dialogs_dialog__f7hZa\",\"active\":\"Dialogs_active__Zj2Oj\",\"messages\":\"Dialogs_messages__d6PY8\",\"message\":\"Dialogs_message__2CAXO\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\r\nimport classes from \"./Dialog.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const Dialog: React.FC<DialogPropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={`${classes.dialog} ${classes.active}`}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__SAroV\",\"avatar\":\"Message_avatar__d13zf\"};","import classes from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type MessagePropsType = {\r\n    id?: number\r\n    text: string,\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            <span>{props.text}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {\r\n    DialogsDataType,\r\n    MessagesDataType\r\n} from '../../redux/dialogsReducer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\nexport type DialogsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsData: Array<DialogsDataType>,\r\n    messagesData: Array<MessagesDataType>\r\n    newMessageBody: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsType> = (props) => {\r\n    let dialogsElements = props.dialogsData.map((d, index) => <Dialog key={index} name={d.name} id={d.id}/>)  //создаем массив элементов после метода .map из dialogsData\r\n    let messagesElements = props.messagesData.map((m, index) => <Message key={index} text={m.text}/>)  //создаем массив элементов после метода .map из messagesData\r\n\r\n    const addNewMessage = (values: any) => {\r\n        let newMessageBody = values.newMessageBody\r\n        props.sendMessage(newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.container}>\r\n                <div className={classes.dialogs_items}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={classes.messages}>\r\n                    <div>{messagesElements}</div>\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your name'}\r\n                       validate={[requiredField, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React from 'react';\r\nimport {\r\n    SendMessageActionType,\r\n    sendMessageCreator,\r\n} from '../../redux/dialogsReducer';\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport { connect } from 'react-redux';\r\nimport {RootStoreType} from \"../../redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n// react-redux connect\r\nlet mapStateToProps = (state: RootStoreType) => {\r\n    return {\r\n        dialogsData: state.dialogs.dialogsData,\r\n        messagesData: state.dialogs.messagesData,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: SendMessageActionType) => void) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer =  compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n\r\n"],"names":["Dialog","props","path","id","className","classes","to","name","Message","text","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","compose","connect","state","dialogsData","dialogs","messagesData","dispatch","sendMessage","newMessageBody","sendMessageCreator","withAuthRedirect","dialogsElements","map","d","index","messagesElements","m","values"],"sourceRoot":""}